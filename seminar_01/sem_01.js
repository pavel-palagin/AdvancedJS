// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const albums = [
  {
    title: "Hybrid Theory",
    artist: "Linkin Park",
    year: 2000,
  },
  {
    title: "Meteora",
    artist: "Linkin Park",
    year: 2003,
  },
  {
    title: "Minutes to Midnight",
    artist: "Linkin Park",
    year: 2007,
  },
];

const musicCollection = {
  albums: [...albums],
  [Symbol.iterator]: function () {
    let index = 0;
    return {
      next: () => {
        if (index < this.albums.length) {
          return {
            value: this.albums[index++],
            done: false,
          };
        } else {
          return {
            done: true,
          };
        }
      },
    };
  },
};

for (let album of musicCollection) {
  console.log(`${album.title} - ${album.artist} (${album.year})`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

let cooks = new Map();
cooks.set("Виктор", "Пицца").set("Ольга", "Суши").set("Дмитрий", "Десерты");

console.log(`Виктор - специализация: ${cooks.get("Виктор")}`);
console.log(`Ольга - специализация: ${cooks.get("Ольга")}`);
console.log(`Дмитрий - специализация: ${cooks.get("Дмитрий")}`);
console.log();

let dishesList = new Map();
dishesList
  .set("Пицца Маргарита", "Виктор")
  .set("Пицца Пепперони", "Виктор")
  .set("Суши Филадельфия", "Ольга")
  .set("Суши Калифорния", "Ольга")
  .set("Тирамису", "Дмитрий")
  .set("Чизкейк", "Дмитрий");

console.log(`Пицца Маргарита - повар: ${dishesList.get("Пицца Маргарита")}`);
console.log(`Суши Калифорния - повар: ${dishesList.get("Суши Калифорния")}`);
console.log(`Чизкейк - повар: ${dishesList.get("Чизкейк")}`);
console.log();

let clients = new Map();
clients.set(1, "Алексей").set(2, "Мария").set(3, "Ирина");

let clientOrder1 = new Set();
clientOrder1.add("Пепперони").add("Тирамису");

let clientOrder2 = new Set();
clientOrder2.add("Калифорния").add("Маргарита");

let clientOrder3 = new Set();
clientOrder3.add("Чизкейк");

let orders = new Map();
orders
  .set(clients.get(1), clientOrder1)
  .set(clients.get(2), clientOrder2)
  .set(clients.get(3), clientOrder3);

console.log(
  `Клиент ${clients.get(1)} заказал: ${[...orders.get(clients.get(1))]}`
);
console.log(
  `Клиент ${clients.get(2)} заказал: ${[...orders.get(clients.get(2))]}`
);
console.log(
  `Клиент ${clients.get(3)} заказал: ${[...orders.get(clients.get(3))]}`
);
